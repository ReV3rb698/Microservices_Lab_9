version: "3.9"

services:
  receiver:
    build:
      context: receiver
      dockerfile: Dockerfile
    deploy:
      replicas: 3
    expose:
      - "8080"
    volumes:
      - ./logs:/app/logs
      - ./config/receiver:/app/config/receiver
      - ./config/log_config.yml:/app/config/log_config.yml
    environment:
      CORS_ALLOW_ALL: "no"
    depends_on:
      - kafka
    networks:
      - internal_network

  storage:
    build:
      context: storage
      dockerfile: Dockerfile
    expose:
      - "8090"
    volumes:
      - ./logs:/app/logs
      - ./config/storage:/app/config/storage
      - ./config/log_config.yml:/app/config/log_config.yml
    environment:
      CORS_ALLOW_ALL: "no"
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - internal_network

  analyzer:
    build:
      context: analyzer
      dockerfile: Dockerfile
    expose:
      - "8100"
    volumes:
      - ./logs:/app/logs
      - ./config/analyzer:/app/config/analyzer
      - ./config/log_config.yml:/app/config/log_config.yml
    environment:
      CORS_ALLOW_ALL: "no"
    depends_on:
      - storage
      - kafka
    networks:
      - internal_network

  processing:
    build:
      context: processing
      dockerfile: Dockerfile
    expose:
      - "8091"
    volumes:
      - ./logs:/app/logs
      - ./config/processing:/app/config/processing
      - ./data:/app/data
      - ./config/log_config.yml:/app/config/log_config.yml
    environment:
      CORS_ALLOW_ALL: "no"
    depends_on:
      - storage
    networks:
      - internal_network

  zookeeper:
    image: wurstmeister/zookeeper
    expose:
      - "2181"
      - "2888"
      - "3888"
    volumes:
      - zookeeper-data:/data
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_network

  kafka:
    image: wurstmeister/kafka
    expose:
      - "9092"
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/kafka:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - internal_network

  db:
    image: mysql
    restart: always
    expose:
      - "3306"
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: ${MYSQL_RANDOM_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - db-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "db"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - internal_network

  dashboard:
    build:
      context: dashboard
      dockerfile: Dockerfile
    ports:
      - "8085:80"  # Or just "80:80" for real deployment
    depends_on:
      - receiver
      - analyzer
      - processing
    networks:
      - internal_network

volumes:
  db-data:
  zookeeper-data:

networks:
  internal_network:
    driver: bridge
