services:
  receiver:
    build:
      context: receiver
      dockerfile: Dockerfile
    ports:
      - "8083:8080"
    volumes:
      - ./logs:/app/logs
      - ./config/receiver:/app/config/receiver
      - ./config/log_config.yml:/app/config/log_config.yml
    depends_on:
      - kafka

  storage:
    build:
      context: storage
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    volumes:
      - ./logs:/app/logs
      - ./config/storage:/app/config/storage
      - ./config/log_config.yml:/app/config/log_config.yml
    depends_on:
      - db
      - kafka

  analyzer:
    build:
      context: analyzer
      dockerfile: Dockerfile
    ports:
      - "8100:8100"
    volumes:
      - ./logs:/app/logs
      - ./config/analyzer:/app/config/analyzer
      - ./config/log_config.yml:/app/config/log_config.yml
    depends_on:
      - storage
      - kafka

  processing:
    build:
      context: processing
      dockerfile: Dockerfile
    ports:
      - "8091:8091"
    volumes:
      - ./logs:/app/logs
      - ./config/processing:/app/config/processing
      - ./data:/app/data
      - ./config/log_config.yml:/app/config/log_config.yml
    depends_on:
      - storage

  zookeeper:
    image: wurstmeister/zookeeper
    volumes:
      - zookeeper-data:/data

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/kafka:/var/lib/kafka/data
    depends_on:
      - zookeeper

  db:
    image: mysql
    restart: always
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: ${MYSQL_RANDOM_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - ./data/database:/var/lib/mysql

volumes:
  my-db:
  zookeeper-data:

